def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode', '1').toInteger()
def flutterVersionName = localProperties.getProperty('flutter.versionName', '1.0')

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
// END: FlutterFire Configuration
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 34

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        applicationId "com.nagakaburos.mausvpn"
        minSdkVersion 25
        targetSdkVersion 34
        versionCode 3
        versionName "1.0.1" //Alpha
    }

    def keystorePropertiesFile = rootProject.file("key.properties")
    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    } else {
        println("Warning: key.properties file not found. Release build will not be signed.")
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release // Certifique-se de usar 'release' aqui
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':vpnLib')
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'com.android.ndk.thirdparty:openssl:1.1.1l-beta-1'
    implementation('androidx.work:work-runtime') {
        version {
            strictly '2.7.0'
        }
    }
}

flutter {
    source '../..'
}
